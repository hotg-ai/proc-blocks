window.SIDEBAR_ITEMS = {"fn":[["find_line_end","Find the end (byte index) of the line, which `index` is within."],["find_line_range","Find the start and end (byte index) of the line, which `index` is within."],["find_line_start","Find the start (byte index) of the line, which `index` is within."],["find_next_line_end","Find the end (byte index) of the next line, the line after the one which `index` is within."],["find_next_line_range","Find the start and end (byte index) of the next line, the line after the one which `index` is within."],["find_next_line_start","Find the start (byte index) of the next line, the line after the one which `index` is within."],["find_prev_line_end","Find the end (byte index) of the previous line, the line before the one which `index` is within."],["find_prev_line_range","Find the start and end (byte index) of the previous line, the line before the one which `index` is within."],["find_prev_line_start","Find the start (byte index) of the previous line, the line before the one which `index` is within."],["str_to_range","Get the start and end (byte index) range (`Range<usize>`), where `substring` is located in `string`. The returned range is relative to `string`."],["str_to_range_unchecked","Get the start and end (byte index) range (`Range<usize>`), where `substring` is located in `string`. The returned range is relative to `string`."]],"struct":[["LineSpan","`LineSpan` represents a single line. It is possible to get a `&str` of the line both including and excluding `\\n` and `\\r\\n`."],["LineSpanIter","An iterator over `LineSpan`s."]],"trait":[["LineSpans","Trait which implements `line_spans` to get a `LineSpanIter`."]]};