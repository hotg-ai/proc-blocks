#![cfg_attr(not(feature = "metadata"), no_std)]

#[macro_use]
extern crate alloc;

mod gain_control;
mod noise_reduction;

pub use crate::noise_reduction::ScaledU16;

use crate::{gain_control::GainControl, noise_reduction::NoiseReduction};
use hotg_rune_proc_blocks::{ProcBlock, Tensor, Transform};

#[derive(Debug, Clone, ProcBlock)]
pub struct NoiseFiltering {
    // gain control options
    strength: f32,
    offset: f32,
    gain_bits: i32,
    #[proc_block(skip)]
    gain_control: gain_control::State,

    // noise filtering options
    smoothing_bits: u32,
    even_smoothing: ScaledU16,
    odd_smoothing: ScaledU16,
    min_signal_remaining: ScaledU16,
    #[proc_block(skip)]
    noise_reduction: noise_reduction::State,
}

impl Transform<Tensor<u32>> for NoiseFiltering {
    type Output = Tensor<i8>;

    fn transform(&mut self, input: Tensor<u32>) -> Tensor<i8> {
        let NoiseFiltering {
            strength,
            offset,
            gain_bits,
            ref mut gain_control,
            smoothing_bits,
            even_smoothing,
            odd_smoothing,
            min_signal_remaining,
            ref mut noise_reduction,
        } = *self;

        let n = NoiseReduction {
            even_smoothing,
            min_signal_remaining,
            odd_smoothing,
            smoothing_bits,
        };
        let cleaned = n.transform(input, noise_reduction);

        let g = GainControl {
            gain_bits,
            offset,
            strength,
        };
        let amplified = g
            .transform(
                cleaned,
                &noise_reduction.estimate,
                smoothing_bits as u16,
                gain_control,
            )
            .map(|_, energy| libm::log2((*energy as f64) + 1.0));

        let (min_value, max_value) = amplified.elements().iter().copied().fold(
            (f64::INFINITY, f64::NEG_INFINITY),
            |(lower, upper), current| (lower.min(current), upper.max(current)),
        );

        amplified.map(|_, energy| {
            ((255.0 * (energy - min_value) / (max_value - min_value)) - 128.0)
                as i8
        })
    }
}

impl Default for NoiseFiltering {
    fn default() -> Self {
        let NoiseReduction {
            smoothing_bits,
            even_smoothing,
            odd_smoothing,
            min_signal_remaining,
        } = NoiseReduction::default();
        let config = GainControl::default();
        let GainControl {
            strength,
            offset,
            gain_bits,
        } = config;

        NoiseFiltering {
            strength,
            offset,
            gain_bits,
            gain_control: gain_control::State::new(
                config,
                smoothing_bits as u16,
            ),
            smoothing_bits,
            even_smoothing,
            odd_smoothing,
            min_signal_remaining,
            noise_reduction: noise_reduction::State::default(),
        }
    }
}


pub mod metadata {
    wit_bindgen_rust::import!(
        "$CARGO_MANIFEST_DIR/../wit-files/rune/runtime-v1.wit"
    );
    wit_bindgen_rust::export!(
        "$CARGO_MANIFEST_DIR/../wit-files/rune/rune-v1.wit"
    );

    struct RuneV1;

    impl rune_v1::RuneV1 for RuneV1 {
        fn start() {
            use runtime_v1::*;

            let metadata =
                Metadata::new("Noise Filtering", env!("CARGO_PKG_VERSION"));
            metadata.set_description(
                "Reduce the amount of high frequency noise in an audio clip and increase its gain.",
            );
            metadata.set_repository(env!("CARGO_PKG_REPOSITORY"));
            metadata.set_homepage(env!("CARGO_PKG_HOMEPAGE"));
            metadata.add_tag("audio");

            let strength = ArgumentMetadata::new("strength");
            strength.set_type_hint(TypeHint::Float);
            strength.set_default_value("0.95");
            strength.argument_metadata_set_argument_range("0","1");
            metadata.add_argument(&strength);

            let offset = ArgumentMetadata::new("offset");
            offset.set_type_hint(TypeHint::Float);
            offset.set_default_value("80");
            metadata.add_argument(&offset);

            let gain_bits = ArgumentMetadata::new("gain_bits");
            gain_bits.set_type_hint(TypeHint::Integer);
            gain_bits.set_default_value("21");
            metadata.add_argument(&gain_bits);

            let smoothing_bits = ArgumentMetadata::new("smoothing_bits");
            smoothing_bits.set_type_hint(TypeHint::Integer);
            smoothing_bits.set_default_value("10");
            metadata.add_argument(&smoothing_bits);

            let even_smoothing = ArgumentMetadata::new("even_smoothing");
            even_smoothing.set_type_hint(TypeHint::Float);
            even_smoothing.set_default_value("0.025");
            metadata.add_argument(&even_smoothing);

            let odd_smoothing = ArgumentMetadata::new("odd_smoothing");
            odd_smoothing.set_type_hint(TypeHint::Float);
            odd_smoothing.set_default_value("0.06");
            metadata.add_argument(&odd_smoothing);

            let min_signal_remaining =
                ArgumentMetadata::new("min_signal_remaining");
            min_signal_remaining.set_type_hint(TypeHint::Float);
            min_signal_remaining.set_default_value("0.05");
            metadata.add_argument(&min_signal_remaining);

            let input = TensorMetadata::new("audio");
            input.set_description("An audio clip");
            let hint = supported_shapes(
                &[ElementType::Uint32],
                Dimensions::Fixed(&[1, 0]),
            );
            input.add_hint(&hint);
            metadata.add_input(&input);

            let output = TensorMetadata::new("filtered");
            let hint = supported_shapes(
                &[ElementType::Int8],
                Dimensions::Fixed(&[1, 0]),
            );
            output.add_hint(&hint);
            metadata.add_output(&output);

            register_node(&metadata);
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    /// We already have a Rune that is known to work (microspeech), so make sure
    /// the proc-block generates the same outputs every time.
    #[test]
    fn smoke_test() {
        let mut pb = NoiseFiltering::default();
        let microspeech_fft = vec![
            9, 130, 180, 93, 61, 42, 43, 47, 75, 81, 73, 29, 10, 16, 11, 13,
            18, 11, 5, 9, 7, 8, 4, 6, 10, 11, 13, 10, 11, 14, 8, 10, 13, 10, 9,
            12, 9, 9, 9, 1, 33, 100, 133, 123, 38, 52, 30, 21, 21, 35, 37, 19,
            11, 8, 9, 8, 10, 11, 12, 19, 9, 5, 6, 5, 10, 12, 12, 14, 14, 8, 11,
            10, 8, 8, 7, 9, 9, 9, 8, 2, 23, 84, 139, 94, 79, 82, 34, 38, 48,
            23, 19, 27, 21, 12, 9, 13, 18, 18, 10, 9, 4, 7, 9, 7, 4, 8, 12, 8,
            9, 10, 10, 9, 13, 12, 10, 9, 8, 6, 6, 1, 18, 73, 59, 19, 32, 37,
            25, 47, 46, 40, 21, 10, 14, 8, 2, 12, 21, 22, 17, 14, 8, 6, 9, 6,
            8, 13, 7, 6, 12, 9, 10, 11, 9, 10, 9, 7, 9, 9, 5, 0, 18, 77, 56,
            51, 38, 28, 38, 45, 62, 35, 39, 13, 8, 6, 7, 8, 9, 9, 13, 11, 9, 7,
            5, 7, 8, 8, 12, 8, 6, 7, 7, 20, 11, 9, 9, 7, 7, 9, 7, 0, 8, 75, 78,
            37, 40, 36, 20, 20, 30, 29, 16, 12, 12, 14, 8, 8, 11, 10, 5, 8, 11,
            8, 3, 6, 6, 6, 6, 6, 4, 8, 6, 9, 12, 10, 8, 7, 6, 7, 6, 0, 19, 44,
            87, 64, 59, 60, 45, 118, 160, 72, 32, 27, 17, 5, 5, 6, 11, 11, 15,
            11, 9, 12, 8, 12, 10, 10, 9, 9, 10, 9, 8, 8, 13, 13, 7, 5, 6, 7, 7,
            1, 43, 113, 68, 37, 40, 42, 29, 51, 72, 26, 16, 23, 13, 4, 3, 7,
            13, 11, 7, 7, 7, 5, 12, 7, 7, 5, 8, 10, 16, 12, 12, 10, 12, 10, 9,
            7, 7, 9, 7, 0, 8, 65, 79, 45, 64, 49, 18, 33, 38, 14, 9, 19, 15, 8,
            1, 9, 9, 10, 8, 8, 6, 4, 3, 11, 8, 9, 8, 8, 8, 7, 9, 9, 8, 9, 8, 7,
            6, 8, 4, 0, 1, 48, 56, 49, 95, 74, 30, 35, 32, 23, 24, 17, 5, 5,
            13, 14, 15, 13, 17, 13, 9, 6, 5, 29, 44, 22, 9, 18, 11, 10, 11, 11,
            10, 10, 6, 7, 7, 7, 5, 0, 23, 97, 107, 59, 27, 43, 45, 44, 89, 41,
            35, 15, 12, 8, 3, 12, 10, 10, 9, 12, 10, 3, 6, 13, 10, 7, 9, 6, 7,
            7, 7, 9, 7, 8, 7, 5, 4, 7, 6, 1, 2, 70, 79, 35, 33, 29, 31, 37, 32,
            21, 34, 12, 14, 12, 6, 5, 15, 17, 9, 8, 6, 10, 9, 13, 14, 9, 7, 5,
            7, 9, 6, 9, 7, 13, 8, 7, 8, 7, 6, 0, 15, 61, 83, 45, 37, 42, 52,
            34, 37, 27, 15, 13, 13, 7, 7, 9, 11, 11, 8, 8, 4, 8, 8, 6, 4, 5, 4,
            10, 11, 8, 6, 9, 9, 10, 6, 6, 5, 5, 4, 1, 25, 128, 142, 61, 69, 63,
            63, 62, 22, 30, 18, 11, 15, 3, 11, 15, 7, 7, 11, 7, 5, 5, 7, 6, 8,
            8, 8, 8, 9, 6, 5, 9, 15, 10, 10, 5, 4, 7, 6, 0, 16, 158, 158, 54,
            60, 59, 70, 63, 61, 44, 23, 17, 12, 3, 6, 13, 17, 6, 6, 10, 4, 7,
            7, 15, 7, 5, 7, 8, 7, 4, 6, 6, 7, 9, 6, 7, 4, 6, 5, 0, 9, 85, 87,
            50, 30, 18, 19, 27, 16, 24, 32, 11, 6, 12, 7, 5, 3, 7, 8, 10, 7, 8,
            7, 8, 9, 7, 7, 7, 6, 8, 5, 10, 7, 12, 7, 6, 6, 9, 6, 0, 10, 98,
            108, 87, 86, 87, 186, 292, 536, 685, 698, 560, 341, 238, 259, 325,
            350, 247, 124, 80, 78, 84, 79, 141, 295, 188, 111, 128, 142, 116,
            37, 7, 8, 10, 8, 7, 11, 8, 6, 2, 1131, 7039, 7352, 3924, 4169,
            2672, 4529, 6757, 10128, 16309, 29811, 20081, 7207, 4845, 6021,
            13339, 12021, 6199, 2211, 1735, 1273, 1545, 1171, 3037, 6462, 3414,
            2763, 6768, 4781, 2230, 335, 72, 92, 229, 184, 89, 526, 299, 184,
            108, 553, 11085, 10642, 4220, 3375, 1619, 1581, 9608, 9676, 14471,
            53083, 29459, 9545, 6863, 14491, 22777, 21974, 11530, 3912, 2945,
            1940, 1890, 1683, 5554, 14871, 7809, 4015, 7148, 5243, 1915, 598,
            128, 93, 255, 328, 134, 312, 330, 288, 168, 1186, 9612, 8924, 5466,
            4837, 1568, 3077, 7244, 7769, 26948, 41372, 31888, 10850, 7335,
            10310, 27448, 19004, 7475, 2762, 2861, 2679, 1966, 1839, 6429,
            19663, 9715, 4759, 7026, 3213, 1939, 592, 70, 165, 355, 356, 206,
            274, 388, 303, 171, 680, 2762, 3505, 4059, 2859, 2154, 3084, 8494,
            11684, 23834, 65536, 54486, 9827, 6738, 10938, 23487, 19030, 8103,
            2778, 1592, 1523, 2467, 1824, 3303, 9798, 5883, 3148, 4198, 2789,
            2193, 586, 99, 80, 145, 286, 246, 253, 214, 215, 145, 1205, 2579,
            4008, 5058, 4176, 2238, 2575, 3932, 3598, 13838, 32241, 23677,
            6899, 3374, 3425, 8938, 10732, 5341, 1801, 603, 681, 730, 1005,
            2267, 6723, 3356, 2386, 3522, 3568, 1405, 852, 95, 57, 129, 170,
            147, 155, 200, 115, 72, 807, 2082, 1686, 1425, 1741, 1431, 1333,
            3233, 4967, 14519, 15009, 10772, 3558, 1603, 3517, 8297, 6780,
            4385, 1432, 570, 591, 738, 629, 1451, 3160, 1740, 1614, 2176, 2472,
            1062, 502, 57, 31, 55, 83, 54, 97, 96, 48, 34, 825, 3502, 3774,
            3176, 2297, 1054, 482, 1363, 2102, 3914, 12104, 7249, 2525, 1667,
            3144, 4063, 4271, 2335, 920, 585, 545, 375, 463, 1308, 3386, 1772,
            1127, 1723, 1144, 550, 338, 54, 19, 41, 61, 40, 50, 50, 25, 15,
            484, 773, 986, 754, 540, 608, 392, 508, 1289, 4931, 12900, 7638,
            2193, 1123, 1254, 3259, 2973, 1292, 766, 452, 525, 328, 558, 1343,
            2589, 1817, 1255, 1506, 964, 593, 275, 50, 19, 20, 22, 13, 22, 26,
            17, 12, 464, 1700, 1734, 981, 851, 595, 296, 343, 1193, 4660, 7622,
            7615, 2055, 1114, 1054, 4393, 3413, 960, 464, 364, 241, 297, 302,
            546, 1631, 1270, 814, 818, 640, 525, 171, 35, 20, 18, 16, 18, 17,
            19, 15, 4, 186, 879, 883, 616, 435, 139, 206, 429, 1315, 6145,
            7438, 3194, 1883, 1035, 1159, 4957, 3049, 1421, 497, 340, 276, 273,
            197, 661, 1294, 738, 793, 732, 576, 281, 161, 30, 15, 15, 17, 15,
            11, 9, 9, 4, 122, 194, 308, 339, 314, 387, 271, 476, 860, 1840,
            4527, 3091, 1158, 759, 1224, 2035, 1551, 899, 456, 388, 216, 209,
            238, 833, 1522, 710, 559, 652, 382, 361, 125, 15, 11, 20, 15, 11,
            10, 14, 7, 1, 135, 411, 636, 394, 394, 763, 1345, 1223, 1559, 2925,
            5771, 2859, 1163, 1192, 2015, 3163, 2582, 1663, 850, 767, 1357,
            1380, 733, 967, 1060, 575, 577, 527, 288, 249, 103, 101, 57, 51,
            89, 42, 113, 227, 254, 153, 120, 442, 472, 296, 395, 516, 910, 679,
            766, 1986, 5864, 3772, 992, 416, 467, 1422, 1368, 1570, 748, 343,
            461, 624, 366, 614, 1014, 518, 390, 539, 321, 151, 131, 89, 52, 50,
            37, 32, 33, 50, 60, 23, 28, 297, 346, 182, 165, 181, 179, 350, 747,
            1294, 2406, 2219, 768, 538, 461, 1067, 1622, 1287, 605, 230, 391,
            438, 167, 374, 860, 450, 314, 258, 253, 175, 84, 41, 52, 39, 26,
            15, 22, 21, 17, 13, 19, 102, 159, 158, 196, 305, 429, 539, 701,
            1022, 2459, 1021, 365, 368, 581, 897, 1343, 881, 353, 198, 283,
            259, 191, 344, 653, 385, 219, 209, 186, 172, 85, 35, 29, 19, 20,
            19, 14, 17, 10, 5, 14, 48, 108, 75, 65, 168, 173, 124, 250, 575,
            1790, 956, 456, 293, 357, 733, 799, 674, 274, 140, 237, 223, 122,
            273, 473, 230, 195, 296, 181, 90, 49, 31, 16, 15, 13, 15, 10, 13,
            10, 1, 26, 49, 49, 42, 77, 100, 83, 121, 348, 288, 1255, 1153, 277,
            219, 268, 379, 541, 409, 279, 66, 106, 169, 102, 202, 364, 197, 94,
            244, 163, 61, 17, 18, 16, 13, 11, 13, 10, 10, 7, 1, 7, 133, 158,
            91, 89, 95, 87, 219, 352, 326, 1284, 800, 243, 185, 223, 830, 1047,
            338, 85, 90, 89, 120, 64, 141, 333, 168, 108, 97, 74, 35, 20, 20,
            16, 12, 12, 12, 10, 12, 8, 3, 7, 77, 124, 104, 36, 39, 63, 178,
            469, 397, 2008, 1206, 364, 210, 232, 710, 428, 192, 106, 47, 83,
            84, 87, 119, 264, 157, 100, 84, 57, 31, 12, 17, 14, 13, 9, 7, 11,
            11, 7, 1, 32, 77, 142, 94, 59, 85, 91, 123, 169, 356, 772, 1247,
            373, 237, 197, 362, 427, 245, 199, 25, 50, 88, 46, 42, 101, 87, 39,
            55, 46, 23, 20, 14, 18, 16, 10, 10, 8, 11, 9, 1, 22, 170, 163, 75,
            79, 103, 80, 118, 218, 346, 1367, 1048, 239, 148, 165, 616, 404,
            153, 69, 39, 22, 20, 15, 61, 185, 120, 39, 37, 23, 14, 16, 19, 13,
            14, 12, 12, 11, 12, 8, 2, 13, 105, 101, 58, 96, 85, 80, 144, 262,
            354, 1296, 706, 127, 125, 152, 275, 164, 64, 32, 29, 19, 12, 7, 91,
            163, 60, 30, 47, 35, 13, 10, 16, 13, 13, 12, 11, 8, 11, 7, 1, 10,
            68, 96, 53, 33, 30, 47, 116, 211, 273, 977, 559, 143, 149, 126,
            181, 209, 102, 38, 28, 14, 13, 15, 41, 68, 36, 27, 22, 19, 16, 14,
            16, 22, 18, 11, 9, 13, 13, 9, 1, 26, 86, 103, 81, 38, 28, 51, 97,
            85, 154, 814, 441, 121, 127, 160, 306, 171, 43, 24, 11, 14, 13, 14,
            29, 101, 48, 12, 18, 20, 15, 10, 12, 14, 11, 10, 10, 7, 10, 10, 1,
            9, 111, 130, 51, 33, 30, 30, 58, 69, 161, 657, 431, 127, 118, 81,
            156, 105, 36, 18, 16, 13, 16, 14, 14, 33, 26, 18, 19, 13, 14, 14,
            13, 10, 16, 12, 11, 7, 9, 6, 2, 24, 113, 106, 32, 72, 47, 42, 121,
            240, 132, 541, 432, 73, 52, 35, 78, 69, 20, 13, 13, 18, 12, 18, 19,
            31, 18, 20, 10, 12, 11, 11, 13, 14, 12, 11, 10, 8, 9, 5, 1, 7, 104,
            152, 114, 36, 30, 34, 40, 44, 135, 235, 144, 67, 34, 28, 51, 37,
            25, 14, 18, 11, 11, 7, 13, 18, 13, 10, 11, 8, 10, 12, 14, 13, 17,
            16, 13, 12, 10, 8, 0, 5, 66, 82, 87, 53, 53, 73, 113, 153, 165,
            594, 345, 72, 34, 27, 19, 25, 38, 14, 11, 5, 9, 12, 13, 17, 20, 13,
            11, 9, 11, 10, 13, 13, 14, 12, 7, 9, 10, 8, 0, 22, 123, 122, 41,
            49, 37, 47, 48, 67, 124, 335, 229, 49, 15, 16, 26, 20, 11, 17, 14,
            10, 5, 12, 16, 22, 14, 10, 15, 11, 9, 10, 13, 12, 15, 9, 7, 6, 8,
            6, 0, 8, 105, 94, 56, 14, 63, 79, 73, 47, 70, 200, 106, 37, 10, 16,
            29, 19, 16, 5, 7, 5, 6, 4, 15, 17, 8, 9, 8, 11, 9, 7, 13, 13, 12,
            9, 9, 6, 8, 7, 2, 16, 130, 222, 124, 63, 51, 63, 69, 79, 62, 216,
            108, 21, 7, 13, 28, 17, 14, 9, 13, 8, 9, 10, 7, 6, 9, 5, 4, 15, 12,
            14, 18, 9, 11, 11, 9, 8, 8, 6, 1, 5, 141, 121, 63, 12, 18, 51, 38,
            33, 22, 26, 29, 24, 10, 9, 18, 14, 8, 12, 13, 8, 15, 5, 13, 7, 6,
            8, 7, 9, 14, 12, 13, 13, 10, 9, 10, 7, 8, 5, 0,
        ];
        let expected = vec![
            -128, -44, -21, -66, -84, -106, -106, -106, -71, -71, -76, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -62, -40, -49, -106, -93,
            -128, -128, -128, -128, -106, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -71, -38, -62, -71, -71, -106, -106, -93, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -76, -84, -128,
            -128, -106, -128, -106, -106, -106, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -76, -93, -93, -106, -128, -106, -106, -84,
            -128, -106, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -76,
            -71, -106, -106, -106, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -106, -66, -84, -84, -93, -106,
            -52, -28, -76, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -106, -52, -76, -106, -106, -106, -128, -93, -76, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -84, -71, -106, -84,
            -106, -128, -128, -106, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -106, -93, -106, -62, -76, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -106, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -62,
            -52, -93, -128, -106, -106, -106, -66, -106, -106, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -84, -71, -128, -128, -128,
            -128, -106, -128, -128, -106, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -84, -66, -106, -106, -106, -93, -128, -106, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -46, -36,
            -84, -76, -84, -84, -84, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -33, -30, -93, -84, -93, -76, -84, -84,
            -106, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -71,
            -66, -93, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -62, -52, -71, -66, -71, -19,
            1, 36, 38, 46, 31, 15, -10, 0, 7, 17, -7, -44, -71, -71, -71, -71,
            -40, 7, -23, -52, -46, -36, -52, -106, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, 62, 87, 107, 80, 96, 73, 98, 87, 111,
            94, 122, 96, 106, 83, 103, 93, 114, 86, 81, 64, 66, 62, 63, 76,
            104, 78, 87, 87, 99, 70, 14, -76, -62, -11, -20, -66, 35, 3, -20,
            -55, 37, 92, 112, 81, 91, 63, 72, 90, 111, 93, 126, 97, 110, 87,
            116, 96, 120, 92, 95, 75, 78, 66, 74, 85, 116, 88, 95, 87, 101, 67,
            40, -46, -62, -5, 13, -44, 11, 8, 6, -30, 63, 90, 110, 84, 99, 62,
            89, 87, 107, 97, 124, 97, 112, 87, 112, 97, 118, 88, 87, 75, 86,
            67, 76, 86, 119, 91, 99, 87, 90, 67, 40, -84, -27, 12, 18, -18, 3,
            16, 9, -28, 45, 74, 92, 80, 88, 69, 89, 89, 113, 96, 127, 99, 111,
            87, 112, 96, 118, 88, 87, 62, 71, 72, 76, 77, 111, 85, 90, 81, 87,
            70, 39, -62, -71, -38, 6, -8, 0, -16, -11, -38, 64, 73, 95, 83, 96,
            70, 85, 80, 93, 93, 123, 96, 106, 77, 92, 90, 112, 84, 76, 34, 45,
            41, 58, 70, 105, 77, 83, 78, 93, 60, 53, -62, -93, -46, -24, -38,
            -30, -20, -49, -76, 51, 68, 74, 60, 75, 60, 67, 77, 100, 93, 116,
            91, 93, 63, 92, 89, 105, 81, 69, 32, 39, 41, 42, 60, 90, 65, 73,
            69, 84, 52, 33, -93, -128, -93, -66, -93, -58, -62, -93, -128, 52,
            78, 94, 76, 82, 52, 31, 59, 80, 80, 114, 87, 85, 64, 90, 80, 97,
            71, 55, 33, 36, 14, 30, 58, 92, 65, 62, 64, 62, 31, 15, -93, -128,
            -106, -84, -106, -93, -93, -128, -128, 31, 42, 58, 42, 36, 34, 22,
            28, 66, 83, 115, 88, 81, 54, 65, 77, 89, 57, 49, 23, 35, 8, 37, 58,
            85, 65, 65, 61, 57, 34, 4, -93, -128, -128, -128, -128, -128, -128,
            -128, -128, 30, 64, 75, 50, 53, 34, 8, 10, 64, 82, 107, 88, 79, 53,
            60, 81, 92, 49, 30, 13, -4, 2, 9, 31, 73, 57, 51, 44, 42, 29, -24,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -19, 46, 54,
            35, 27, -42, -13, 21, 67, 86, 107, 76, 77, 51, 63, 83, 89, 60, 33,
            10, 4, -2, -16, 37, 66, 41, 50, 41, 38, 0, -28, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -44, -21, 10, 10, 11, 16, 3,
            25, 53, 66, 98, 76, 63, 42, 64, 68, 71, 47, 29, 16, -10, -17, -4,
            45, 71, 40, 37, 37, 21, 13, -44, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -40, 19, 42, 17, 22, 42, 67, 56, 72, 75,
            102, 75, 63, 55, 79, 76, 85, 64, 53, 42, 68, 59, 47, 49, 60, 32,
            38, 29, 6, -7, -55, -62, -93, -93, -66, -106, -49, -12, 0, -36,
            -46, 22, 31, 2, 23, 28, 55, 38, 49, 67, 103, 79, 58, 19, 30, 60,
            68, 62, 48, 10, 29, 35, 19, 35, 58, 28, 22, 30, 12, -36, -40, -66,
            -93, -93, -106, -128, -128, -93, -84, -128, -128, 2, 16, -25, -27,
            -25, -22, 11, 48, 57, 83, 70, 49, 30, 29, 52, 73, 57, 40, -11, 22,
            22, -25, 14, 53, 23, 11, -5, 0, -27, -66, -106, -93, -106, -128,
            -128, -128, -128, -128, -128, -128, -58, -28, -33, -16, 4, 26, 30,
            46, 51, 84, 51, 19, 13, 39, 47, 67, 47, 17, -20, 5, -5, -18, 10,
            43, 16, -9, -17, -19, -28, -66, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -106, -52, -76, -84, -30, -24, -49, -1, 32,
            75, 49, 29, 2, 18, 41, 50, 38, 3, -40, -4, -13, -44, -2, 31, -11,
            -16, 2, -21, -66, -93, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -106, -93, -106, -71, -62, -66, -49, 16, 1, 65,
            54, 4, -14, 2, 15, 36, 18, 5, -84, -55, -30, -55, -19, 19, -21,
            -62, -8, -27, -84, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -44, -30, -66, -66, -62, -66, -14, 17, 7, 66, 44,
            -3, -24, -8, 45, 59, 9, -66, -66, -66, -49, -84, -40, 14, -30, -52,
            -62, -76, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -76, -44, -58, -106, -106, -84, -27, 30, 17, 79,
            56, 19, -17, -5, 40, 26, -22, -55, -106, -66, -71, -66, -52, 1,
            -34, -58, -71, -93, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -76, -36, -62, -84, -71, -62, -49, -25, 12,
            49, 56, 20, -10, -16, 13, 26, -8, -15, -128, -93, -66, -106, -106,
            -55, -71, -106, -93, -106, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -30, -27, -76, -71, -58, -71,
            -52, -10, 11, 68, 52, -4, -38, -27, 35, 23, -36, -76, -106, -128,
            -128, -128, -84, -20, -49, -106, -106, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -58, -55,
            -93, -58, -71, -71, -40, 1, 12, 66, 40, -42, -46, -31, -1, -27,
            -84, -128, -128, -128, -128, -128, -66, -27, -93, -128, -106, -106,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -84, -58, -93, -128, -128, -106, -52, -11, -2, 57, 31, -36,
            -36, -44, -25, -12, -58, -106, -128, -128, -128, -128, -106, -76,
            -106, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -71, -55, -71, -106, -128, -93, -62,
            -66, -34, 51, 22, -46, -46, -28, 4, -24, -106, -128, -128, -128,
            -128, -128, -128, -55, -106, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -55, -42,
            -93, -128, -128, -128, -93, -76, -33, 43, 21, -42, -52, -71, -34,
            -55, -106, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -52, -55, -128, -76, -106, -106, -49, -4, -44,
            36, 21, -76, -93, -106, -76, -76, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -58, -31, -52,
            -106, -128, -106, -106, -106, -44, -5, -40, -76, -128, -128, -93,
            -106, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -84, -71, -71, -93, -93, -76, -52, -31, -31, 40,
            10, -76, -128, -128, -128, -128, -106, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -49, -44, -106,
            -93, -106, -106, -106, -76, -49, 14, -11, -93, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -58, -62, -93, -128, -84, -71, -76, -106, -84,
            -15, -58, -106, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -44, -8, -49,
            -84, -93, -84, -84, -71, -84, -10, -55, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -40, -46, -84, -128, -128, -93, -106, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
            -128, -128, -128, -128, -128, -128, -128, -128,
        ];
        let dimensions = vec![1, microspeech_fft.len()];
        let input = Tensor::new_row_major(microspeech_fft.into(), dimensions);

        let output = pb.transform(input);

        assert_eq!(output.elements(), expected);
    }
}
