{"message":"unused import: `str::FromStr`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"logistic_regression_inference/src/lib.rs","byte_start":265,"byte_end":277,"line_start":5,"line_end":5,"column_start":23,"column_end":35,"is_primary":true,"text":[{"text":"use std::{fmt::Debug, str::FromStr};","highlight_start":23,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"logistic_regression_inference/src/lib.rs","byte_start":263,"byte_end":277,"line_start":5,"line_end":5,"column_start":21,"column_end":35,"is_primary":true,"text":[{"text":"use std::{fmt::Debug, str::FromStr};","highlight_start":21,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `str::FromStr`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlogistic_regression_inference/src/lib.rs:5:23\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::{fmt::Debug, str::FromStr};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused imports: `linalg::Matrix`, `math::num::RealNumber`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"logistic_regression_inference/src/lib.rs","byte_start":473,"byte_end":487,"line_start":15,"line_end":15,"column_start":54,"column_end":68,"is_primary":true,"text":[{"text":"    {linear::logistic_regression::LogisticRegression,linalg::Matrix, math::num::RealNumber};","highlight_start":54,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"logistic_regression_inference/src/lib.rs","byte_start":489,"byte_end":510,"line_start":15,"line_end":15,"column_start":70,"column_end":91,"is_primary":true,"text":[{"text":"    {linear::logistic_regression::LogisticRegression,linalg::Matrix, math::num::RealNumber};","highlight_start":70,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"logistic_regression_inference/src/lib.rs","byte_start":472,"byte_end":510,"line_start":15,"line_end":15,"column_start":53,"column_end":91,"is_primary":true,"text":[{"text":"    {linear::logistic_regression::LogisticRegression,linalg::Matrix, math::num::RealNumber};","highlight_start":53,"highlight_end":91}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `linalg::Matrix`, `math::num::RealNumber`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlogistic_regression_inference/src/lib.rs:15:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    {linear::logistic_regression::LogisticRegression,linalg::Matrix, math::num::RealNumber};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"missing generics for struct `LogisticRegression`","code":{"code":"E0107","explanation":"An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"logistic_regression_inference/src/lib.rs","byte_start":1793,"byte_end":1811,"line_start":50,"line_end":50,"column_start":20,"column_end":38,"is_primary":true,"text":[{"text":"        let model: LogisticRegression= serde_json::from_str(&self.model_file).map_err(RunError::other);","highlight_start":20,"highlight_end":38}],"label":"expected 2 generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"struct defined here, with 2 generic parameters: `T`, `M`","code":null,"level":"note","spans":[{"file_name":"/Users/mohit/.cargo/git/checkouts/smartcore-21ea4dcbae50956e/31f8612/src/linear/logistic_regression.rs","byte_start":3963,"byte_end":3964,"line_start":91,"line_end":91,"column_start":31,"column_end":32,"is_primary":false,"text":[{"text":"pub struct LogisticRegression<T: RealNumber, M: Matrix<T>> {","highlight_start":31,"highlight_end":32}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/mohit/.cargo/git/checkouts/smartcore-21ea4dcbae50956e/31f8612/src/linear/logistic_regression.rs","byte_start":3978,"byte_end":3979,"line_start":91,"line_end":91,"column_start":46,"column_end":47,"is_primary":false,"text":[{"text":"pub struct LogisticRegression<T: RealNumber, M: Matrix<T>> {","highlight_start":46,"highlight_end":47}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/mohit/.cargo/git/checkouts/smartcore-21ea4dcbae50956e/31f8612/src/linear/logistic_regression.rs","byte_start":3944,"byte_end":3962,"line_start":91,"line_end":91,"column_start":12,"column_end":30,"is_primary":true,"text":[{"text":"pub struct LogisticRegression<T: RealNumber, M: Matrix<T>> {","highlight_start":12,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"add missing generic arguments","code":null,"level":"help","spans":[{"file_name":"logistic_regression_inference/src/lib.rs","byte_start":1793,"byte_end":1811,"line_start":50,"line_end":50,"column_start":20,"column_end":38,"is_primary":true,"text":[{"text":"        let model: LogisticRegression= serde_json::from_str(&self.model_file).map_err(RunError::other);","highlight_start":20,"highlight_end":38}],"label":null,"suggested_replacement":"LogisticRegression<T, M>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0107]\u001b[0m\u001b[0m\u001b[1m: missing generics for struct `LogisticRegression`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlogistic_regression_inference/src/lib.rs:50:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let model: LogisticRegression= serde_json::from_str(&self.model_file).map_err(RunError::other);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 2 generic arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: struct defined here, with 2 generic parameters: `T`, `M`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/mohit/.cargo/git/checkouts/smartcore-21ea4dcbae50956e/31f8612/src/linear/logistic_regression.rs:91:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct LogisticRegression<T: RealNumber, M: Matrix<T>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add missing generic arguments\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let model: \u001b[0m\u001b[0m\u001b[38;5;10mLogisticRegression<T, M>\u001b[0m\u001b[0m= serde_json::from_str(&self.model_file).map_err(RunError::other);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"aborting due to previous error; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error; 2 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0107`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0107`.\u001b[0m\n"}
